pragma experimental ABIEncoderV2;
pragma solidity >=0.7.0 <0.8.0;

//:: Authors:
    // Tomas Andriekus pr0logas[@]protonmail.com
    // Karolis Birgela karolisbirgela[@]gmail.com

contract LRK {

address private OWNER;
uint public SMART_CONTRACT_RELEASE_BY_UNIXTIME;
uint32 public constant CONSTITUTION_RELEASE_BY_UNIXTIME = 720716400;
mapping(uint8 => Constitution_Data) public constitution;
uint8 private constant ARTICLE_COUNT = 15;

//mapping(uint8 => mapping(uint8 => string)) public article_law_map;

// Get specified law by number
//mapping(uint8 => string) public call_law;

// Get specified whole article by number
//mapping(uint8 => string[]) public call_article;

mapping(uint8 => uint8) public laws_per_article;

uint8[16] private law_count_per_article = [0, 17, 20, 8, 9, 22, 14, 11, 7, 10, 6, 8, 2, 12, 3, 5];


// Constitution text values
string public constant LITHUANIAN_ROOTS_INFO = hex"4c494554555649c5b22054415554410a0ae280932070726965c5a12064617567656cc4af20616dc5be69c5b32073756bc5ab72757369204c69657475766f732076616c73747962c4992c0ae28093206a6f732074656973696e6975732070616d61747573206772696e64757369204c69657475766f7320537461747574616973206972204c69657475766f73205265737075626c696b6f73204b6f6e737469747563696a6f6d69732c0ae2809320c5a1696d746d65c48d696169732061746b616b6c6961692067796e757369207361766f206c61697376c499206972206e657072696b6c6175736f6d7962c4992c0ae280932069c5a1736175676f6a757369207361766f206476617369c4852c2067696d74c4856ac485206b616c62c4852c207261c5a174c48520697220706170726fc48d6975732c0ae2809320c4af6bc5ab6e7964616d612070726967696d74696ec49920c5be6d6f6761757320697220546175746f732074656973c499206c61697376616920677976656e7469206972206b75727469207361766f2074c49776c5b32069722070726f74c4977669c5b320c5be656dc4976a6520e28093206e657072696b6c6175736f6d6f6a65204c69657475766f732076616c73747962c4976a652c0ae280932070756f73656cc49764616d61204c69657475766f7320c5be656dc4976a652074617574696ec4992073616e74617276c4992c0ae28093207369656b64616d612061747669726f732c2074656973696e676f732c206461726e696f732070696c696574696ec4977320766973756f6d656ec497732069722074656973696ec497732076616c73747962c497732c0a617467696d7573696f73204c69657475766f732076616c73747962c497732070696c6965c48d69c5b32076616c696120707269696d6120697220736b656c62696120c5a169c485204b4f4e535449545543494ac4842e";

// Made this to private; A function named "call_law" is able to expose law values publicly;
string[] private laws = [
    "",
    hex"4c69657475766f732076616c73747962c49720797261206e657072696b6c6175736f6d612064656d6f6b726174696ec497207265737075626c696b612e",
    hex"4c69657475766f732076616c73747962c499206b757269612054617574612e205375766572656e697465746173207072696b6c6175736f205461757461692e",
    hex"4e69656b6173206e6567616c6920766172c5be797469206172207269626f746920546175746f73207375766572656e697465746f2c20736176696e74697320766973616920546175746169207072696b6c617573616ec48d69c5b3207375766572656e69c5b32067616c69c5b32e0a5461757461206972206b69656b7669656e61732070696c696574697320747572692074656973c4992070726965c5a1696e74697320626574206b616d2c206b617320707269657661727461206bc49773696e61736920c4af204c69657475766f732076616c73747962c49773206e657072696b6c6175736f6d7962c4992c2074657269746f72696a6f73207669656e746973756dc4852c206b6f6e737469747563696ec4992073616e747661726bc4852e",
    hex"41756bc5a1c48d6961757369c485207375766572656e69c4852067616c69c4852054617574612076796b646f2074696573696f67696169206172207065722064656d6f6b72617469c5a16b61692069c5a172696e6b747573207361766f20617473746f7675732e",
    hex"56616c73747962c497732076616c64c5be69c485204c69657475766f6a652076796b646f205365696d61732c205265737075626c696b6f73205072657a6964656e74617320697220567972696175737962c4972c20546569736d61732e0a56616c64c5be696f732067616c696173207269626f6a61204b6f6e737469747563696a612e0a56616c64c5be696f7320c4af73746169676f73207461726e61756a6120c5be6d6f6ec4976d732e",
    hex"4b6f6e737469747563696a6120797261207669656e74697361732069722074696573696f67696169207461696b6f6d617320616b7461732e0a4b69656b7669656e6173207361766f207465697365732067616c692067696e74692072656d64616d61736973204b6f6e737469747563696a612e",
    hex"4e6567616c696f6a61206a6f6b7320c4af73746174796d6173206172206b6974617320616b7461732070726965c5a1696e676173204b6f6e737469747563696a61692e0a47616c696f6a612074696b207061736b656c62746920c4af73746174796d61692e0ac4ae73746174796d6f206e65c5be696e6f6a696d6173206e6561746c656964c5be6961206e756f20617473616b6f6d7962c497732e",
    hex"56616c73747962696ec497732076616c64c5be696f73206172206a6f7320696e737469747563696a6f732075c5be67726f62696d617320736d75727475206c61696b6f6d6920616e74696b6f6e737469747563696e69616973207665696b736d6169732c20797261206e6574656973c4977469206972206e6567616c696f6a612e",
    hex"537661726269617573692056616c73747962c497732062656920546175746f7320677976656e696d6f206b6c617573696d616920737072656e64c5be69616d69207265666572656e64756d752e0ac4ae73746174796d6f206e7573746174797461697320617476656a616973207265666572656e64756dc48520736b656c626961205365696d61732e0a5265666572656e64756d617320746169702070617420736b656c6269616d61732c206a65696775206a6f207265696b616c61756a61206e65206d61c5be696175206b616970203330302074c5ab6b7374616ec48d69c5b32070696c6965c48d69c5b32c20747572696ec48d69c5b32072696e6b696dc5b32074656973c4992e0a5265666572656e64756d6f20736b656c62696d6f2069722076796b64796d6f20747661726bc485206e75737461746f20c4af73746174796d61732e",
    hex"4c69657475766f732076616c73747962c497732074657269746f72696a6120797261207669656e74697361206972206e6564616c696a616d6120c4af206a6f6b6975732076616c73747962696e69757320646172696e6975732e0a56616c73747962c49773207369656e6f732067616c692062c5ab7469206b6569c48d69616d6f732074696b204c69657475766f73205265737075626c696b6f73207461727074617574696e6520737574617274696d692c206b6169206ac485207261746966696b756f6a6120342f3520766973c5b3205365696d6f206e617269c5b32e",
    hex"4c69657475766f732076616c73747962c497732074657269746f72696a6f732061646d696e697374726163696e697573207669656e65747573206972206ac5b3207269626173206e75737461746f20c4af73746174796d61732e",
    hex"4c69657475766f73205265737075626c696b6f732070696c6965747962c49720c4af67796a616d612067696d7374616e74206972206b697461697320c4af73746174796d6f206e757374617479746169732070616772696e646169732e0a49c5a1736b7972757320c4af73746174796d6f206e756d617479747573206174736b6972757320617476656a75732c206e69656b6173206e6567616c692062c5ab7469206b61727475204c69657475766f73205265737075626c696b6f73206972206b69746f732076616c73747962c497732070696c69657469732e0a50696c6965747962c4977320c4af67696a696d6f206972206e6574656b696d6f20747661726bc485206e75737461746f20c4af73746174796d61732e",
    hex"4c69657475766f732076616c73747962c49720676c6f626f6a61207361766f2070696c6965c48d6975732075c5be7369656e796a652e0a4472617564c5be69616d612069c5a164756f7469204c69657475766f73205265737075626c696b6f732070696c696574c4af206b697461692076616c7374796265692c206a65696775204c69657475766f73205265737075626c696b6f73207461727074617574696ec497207375746172746973206e656e75737461746f206b69746169702e",
    hex"56616c73747962696ec497206b616c626120e28093206c696574757669c5b3206b616c62612e",
    hex"56616c73747962c497732076c4976c6961766f73207370616c766f7320e280932067656c746f6e612c20c5be616c69612c20726175646f6e612e0a56616c73747962c497732068657262617320e280932062616c74617320567974697320726175646f6e616d65206c61756b652e0a56616c73747962c497732068657262c4852c2076c4976c696176c485206972206ac5b3206e6175646f6a696dc485206e75737461746f20c4af73746174796d61692e",
    hex"56616c73747962c497732068696d6e617320e280932056696e636f204b756469726b6f7320e2809e5461757469c5a16b6120676965736dc497e2809c2e",
    hex"4c69657475766f732076616c73747962c4977320736f7374696ec497207972612056696c6e69617573206d69657374617320e2809320696c6761616dc5bec497206973746f72696ec497204c69657475766f7320736f7374696ec4972e",
    hex"c5bd6d6f676175732074656973c49773206972206c61697376c49773207972612070726967696d74696ec497732e",
    hex"c5bd6d6f676175732074656973c49920c4af206779767962c49920736175676f20c4af73746174796d61732e",
    hex"c5bd6d6f67617573206c61697376c497206e656c6965c48d69616d612e0a4e69656b6173206e6567616c692062c5ab7469207361766176616c69c5a16b61692073756c61696b797461732061726261206c61696b6f6d6173207375696d7461732e204e69656b616d206e65747572692062c5ab7469206174696d7461206c61697376c497206b69746169702c206b61697020746f6b696169732070616772696e6461697320697220706167616c20746f6b6961732070726f636564c5ab7261732c206b6f6b69617320797261206e7573746174c4997320c4af73746174796d61732e0a4e7573696b616c74696d6f20766965746f6a652073756c61696b797461732061736d756f207065722034382076616c616e64617320747572692062c5ab746920707269737461747974617320c4af20746569736dc4852c206b75722073756c61696b7974616a616d2064616c797661756a616e7420737072656e64c5be69616d61732073756c61696b796d6f2070616772c4af7374756d61732e204a6569677520746569736d6173206e65707269696d61206e75746172696d6f2061736d656ec4af207375696d74692c2073756c61696b7974617369732074756f6a6175207061742070616c656964c5be69616d61732e",
    hex"c5bd6d6f676175732061736d756f206e656c6965c48d69616d61732e0ac5bd6d6f67617573206f72756dc4852067696e6120c4af73746174796d61732e0a4472617564c5be69616d6120c5be6d6f67c5b3206b616e6b696e74692c20c5be616c6f74692c20c5be656d696e7469206a6f206f72756dc4852c20c5be69617572696169207375206a756f20656c677469732c207461697020706174206e757374617479746920746f6b69617320626175736d65732e0a537520c5be6d6f67756d692c206265206a6f20c5be696e696f73206972206c616973766f20737574696b696d6f2c206e6567616c692062c5ab74692061746c69656b616d69206d6f6b736c696e696169206172206d65646963696e6f732062616e64796d61692e",
    hex"c5bd6d6f6761757320707269766174757320677976656e696d6173206e656c6965c48d69616d61732e0a41736d656e7320737573697261c5a1696ec4976a696d61732c20706f6b616c626961692074656c65666f6e752c2074656c65677261666f207072616e65c5a1696d6169206972206b69746f6b732073757369c5be696e6f6a696d6173206e656c6965c48d69616d692e0a496e666f726d6163696a61206170696520707269766174c5b32061736d656e7320677976656e696dc4852067616c692062c5ab74692072656e6b616d612074696b206d6f747976756f747520746569736d6f20737072656e64696d752069722074696b20706167616c20c4af73746174796dc4852e0ac4ae73746174796d617320697220746569736d617320736175676f2c206b6164206e69656b6173206e65706174697274c5b3207361766176616c69c5a16b6f206172206e6574656973c497746f206b69c5a1696d6f736920c4af206a6f2061736d656e696ec4af20697220c5a165696d796e696ec4af20677976656e696dc4852c206bc49773696e696d6f736920c4af206a6f2067617262c499206972206f72756dc4852e"
    ];


    constructor() {

        // Memory variables only available during contract initialization/deployment;
        //uint8[16] memory law_count_per_article = [0, 17, 20, 8, 9, 22, 14, 11, 7, 10, 6, 8, 2, 12, 3, 5];
        
        // Maps articles with a number of laws in it
        for (uint8 i = 0; i < law_count_per_article.length; i++){
            laws_per_article[i] = law_count_per_article[i];
        }

        /*
        // i = article number (1 - 15)
        // j = law number (1 - 154)
        for (uint8 i = 1; i <= ARTICLE_COUNT; i++) {
            for (uint8 j = 0; j < laws.length; j++) {
                //article_law_map[i][j] = article[j];
                law_value_map[j] = laws[j];
                
            }
        }
        */

        // Call any law by number; May use getLaw function for simplicity instead
        //for (uint8 j = 0; j < laws.length; j++) {
        //    call_law[j] = laws[j];
        //}
        
        OWNER = msg.sender;
        SMART_CONTRACT_RELEASE_BY_UNIXTIME = block.timestamp;
        string memory constitution_section_intro1 = hex"4c49455455564f532056414c53545942c496";
        string memory constitution_law1 = hex"4c69657475766f732076616c73747962c49720797261206e657072696b6c6175736f6d612064656d6f6b726174696ec497207265737075626c696b612e";
        constitution[1] = Constitution_Data(constitution_section_intro1, 1, constitution_law1);
        
    }
    
    // This actually needed? Possible to convert to modifier?
    function check_valid_article(uint8 _number) private pure{
        require(_number > 0, "provided article too low");
        require(_number < 16, "provided article too high");
    }

    function check_valid_law(uint8 _number) private pure{
        require(_number > 0, "provided law too low");
        require(_number < 155, "provided law too high");
    }

    // Returns exact law provided by the input number
    function getLaw(uint8 _number) public view returns(string memory _result){
        check_valid_law(_number);
        _result = laws[_number];
        return _result;
    }
    
    // Returns the law range for the Nth article
    function getArticleRange(uint8 _number) internal view returns(uint8 _start, uint8 _end){
        check_valid_article(_number);
        _start = 1;
        
        // This loop sums all law counts up to the Nth article, provided in _number to form the starting law number;
        // It forms starting for listing laws, for example: input 3, result = 38, meaning 3rd article begins with 38th law;
        for (uint8 article = 0; article < _number; article++){
            _start = _start + law_count_per_article[article];
        }

        // Same loop as above, except it calculates the ending law number in the article, provided by _number;
        for (uint8 article = 0; article < _number + 1; article++){
            _end = _end + law_count_per_article[article];
        }
    }
  
    // Needs update; Currently returns only the last law on the provided article
    function getArticle(uint8 _number) public view returns(string memory result){
        (uint8 _start, uint8 _end) = getArticleRange(_number);
        result = getLaw(_end);

    }

    struct Constitution_Data {
        string constitution_section_intro;
        uint8 constitution_number;
        string constitution_law;
    }

    function add_constitution_item(uint8 _constitution_section_number, string memory _constitution_section_intro, uint8 _constitution_number, string memory constitution_law) public is_owner {
        constitution[_constitution_section_number] = Constitution_Data(_constitution_section_intro, _constitution_number, constitution_law);
    }

    modifier is_owner() {
        require(msg.sender == OWNER, "Caller is not smart contract owner");
        _;
    }

    function kill_sc() public is_owner {
       selfdestruct(msg.sender);
   }
}
