pragma experimental ABIEncoderV2;
pragma solidity >=0.7.0 <0.8.0;

//:: Authors:
    // Tomas Andriekus pr0logas[@]protonmail.com
    // Karolis Birgela karolisbirgela[@]gmail.com

contract LRK {

address private OWNER;
uint public SMART_CONTRACT_RELEASE_BY_UNIXTIME;
uint32 public constant CONSTITUTION_RELEASE_BY_UNIXTIME = 720716400;
string public constant LITHUANIAN_ROOTS_INFO = hex"4c494554555649c5b22054415554410a0ae280932070726965c5a12064617567656cc4af20616dc5be69c5b32073756bc5ab72757369204c69657475766f732076616c73747962c4992c0ae28093206a6f732074656973696e6975732070616d61747573206772696e64757369204c69657475766f7320537461747574616973206972204c69657475766f73205265737075626c696b6f73204b6f6e737469747563696a6f6d69732c0ae2809320c5a1696d746d65c48d696169732061746b616b6c6961692067796e757369207361766f206c61697376c499206972206e657072696b6c6175736f6d7962c4992c0ae280932069c5a1736175676f6a757369207361766f206476617369c4852c2067696d74c4856ac485206b616c62c4852c207261c5a174c48520697220706170726fc48d6975732c0ae2809320c4af6bc5ab6e7964616d612070726967696d74696ec49920c5be6d6f6761757320697220546175746f732074656973c499206c61697376616920677976656e7469206972206b75727469207361766f2074c49776c5b32069722070726f74c4977669c5b320c5be656dc4976a6520e28093206e657072696b6c6175736f6d6f6a65204c69657475766f732076616c73747962c4976a652c0ae280932070756f73656cc49764616d61204c69657475766f7320c5be656dc4976a652074617574696ec4992073616e74617276c4992c0ae28093207369656b64616d612061747669726f732c2074656973696e676f732c206461726e696f732070696c696574696ec4977320766973756f6d656ec497732069722074656973696ec497732076616c73747962c497732c0a617467696d7573696f73204c69657475766f732076616c73747962c497732070696c6965c48d69c5b32076616c696120707269696d6120697220736b656c62696120c5a169c485204b4f4e535449545543494ac4842e";
mapping(uint8 => Constitution_Data) public constitution;
uint8 private constant ARTICLE_COUNT = 15;

mapping(uint8 => mapping(uint8 => string)) public article_law_map;
    
    constructor() {
        //uint8[15] memory law_count = [17, 20, 8, 9, 22, 14, 11, 7, 10, 6, 8, 2, 12, 3, 5];
        string[6] memory laws = [
            hex"4c69657475766f732076616c73747962c49720797261206e657072696b6c6175736f6d612064656d6f6b726174696ec497207265737075626c696b612e",
            hex"4c69657475766f732076616c73747962c499206b757269612054617574612e205375766572656e697465746173207072696b6c6175736f205461757461692e",
            hex"4e69656b6173206e6567616c6920766172c5be797469206172207269626f746920546175746f73207375766572656e697465746f2c20736176696e74697320766973616920546175746169207072696b6c617573616ec48d69c5b3207375766572656e69c5b32067616c69c5b32e0a5461757461206972206b69656b7669656e61732070696c696574697320747572692074656973c4992070726965c5a1696e74697320626574206b616d2c206b617320707269657661727461206bc49773696e61736920c4af204c69657475766f732076616c73747962c49773206e657072696b6c6175736f6d7962c4992c2074657269746f72696a6f73207669656e746973756dc4852c206b6f6e737469747563696ec4992073616e747661726bc4852e",
            hex"c5bd6d6f67617573206c61697376c497206e656c6965c48d69616d612e0a4e69656b6173206e6567616c692062c5ab7469207361766176616c69c5a16b61692073756c61696b797461732061726261206c61696b6f6d6173207375696d7461732e204e69656b616d206e65747572692062c5ab7469206174696d7461206c61697376c497206b69746169702c206b61697020746f6b696169732070616772696e6461697320697220706167616c20746f6b6961732070726f636564c5ab7261732c206b6f6b69617320797261206e7573746174c4997320c4af73746174796d61732e0a4e7573696b616c74696d6f20766965746f6a652073756c61696b797461732061736d756f207065722034382076616c616e64617320747572692062c5ab746920707269737461747974617320c4af20746569736dc4852c206b75722073756c61696b7974616a616d2064616c797661756a616e7420737072656e64c5be69616d61732073756c61696b796d6f2070616772c4af7374756d61732e204a6569677520746569736d6173206e65707269696d61206e75746172696d6f2061736d656ec4af207375696d74692c2073756c61696b7974617369732074756f6a6175207061742070616c656964c5be69616d61732e",
            hex"c5bd6d6f676175732074656973c49773206972206c61697376c49773207972612070726967696d74696ec497732e",
            hex"c5bd6d6f676175732074656973c49920c4af206779767962c49920736175676f20c4af73746174796d61732e"
            ];
           
            
        for (uint8 i = 1; i <= ARTICLE_COUNT; i++) {
            for (uint8 j = 0; j < laws.length; j++) {
            //    article_law_map[i][j] = laws[j]; << -- Neveikia
            }
        }
        
 
/*
        string[20]
        string[8]
        string[9]
        string[22]
        string[14]
        string[11]
        string[7]
        string[10]
        string
  */      
        
        OWNER = msg.sender;
        SMART_CONTRACT_RELEASE_BY_UNIXTIME = block.timestamp;
        string memory constitution_section_intro1 = hex"4c49455455564f532056414c53545942c496";
        string memory constitution_law1 = hex"4c69657475766f732076616c73747962c49720797261206e657072696b6c6175736f6d612064656d6f6b726174696ec497207265737075626c696b612e";
        constitution[1] = Constitution_Data(constitution_section_intro1, 1, constitution_law1);
        
         
    }

    struct Constitution_Data {
        string constitution_section_intro;
        uint8 constitution_number;
        string constitution_law;
    }

    function add_constitution_item(uint8 _constitution_section_number, string memory _constitution_section_intro, uint8 _constitution_number, string memory constitution_law) public is_owner {
        constitution[_constitution_section_number] = Constitution_Data(_constitution_section_intro, _constitution_number, constitution_law);
    }

    modifier is_owner() {
        require(msg.sender == OWNER, "Caller is not smart contract owner");
        _;
    }

    function kill_sc() public is_owner {
       selfdestruct(msg.sender);
   }
}
